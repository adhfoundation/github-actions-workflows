name: Reusable Workflow to Check PR Description and Jira Task Status

on:
  workflow_call:
    secrets:
      GH_ACCESS_TOKEN:  # Nome alterado para evitar conflito com a variável reservada
        description: 'GitHub token to access the PR description.'
        required: true
      jira_base_url:
        description: 'Base URL for Jira instance.'
        required: true
      jira_email:
        description: 'Email for Jira API authentication.'
        required: true
      jira_api_token:
        description: 'API token for Jira authentication.'
        required: true

jobs:
  check-pr-description:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3


      - name: Get PR description
        id: get_description
        run: |
          pr_description=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }} | jq -r '.body')

          echo "Descrição do PR: $pr_description"

          # Encontrar todas as ocorrências de RMP-0000
          rmp_tasks=($(echo "$pr_description" | grep -o -E 'RMP-[0-9]{4}'))

          if [ ${#rmp_tasks[@]} -gt 0 ]; then
            echo "Tarefas encontradas: ${rmp_tasks[@]}"
            echo "rmp_found=true" >> $GITHUB_ENV
            echo "rmp_tasks=${rmp_tasks[*]}" >> $GITHUB_ENV
          else
            echo "Nenhum padrão RMP-0000 encontrado."
            echo "rmp_found=false" >> $GITHUB_ENV
          fi

      - name: Fail if no RMP-0000 pattern is found
        if: env.rmp_found == 'false'
        run: |
          echo "Erro: A descrição do PR não contém identificadores no formato RMP-0000."
          exit 1

      - name: Check Jira Task Status
        if: env.rmp_found == 'true'
        id: check_jira_task
        run: |
          IFS=' ' read -r -a rmp_tasks <<< "${{ env.rmp_tasks }}"
          
          # Variável para verificar se todas as tarefas estão no status correto
          all_tasks_ready=true

          # Loop para verificar o status de cada tarefa no Jira
          for rmp_task in "${rmp_tasks[@]}"; do
            jira_task_url="{{ secrets.jira_base_url }}/rest/api/3/issue/${rmp_task}"

            echo "Verificando a URL $jira_task_url"

            jira_response=$(curl -s -u "${{ secrets.jira_email }}:${{ secrets.jira_api_token }}" \
              -H "Content-Type: application/json" \
              "${{ secrets.jira_task_url }}")

            jira_status=$(echo "$jira_response" | jq -r '.fields.status.name')

            echo "Status da Task $rmp_task no Jira: $jira_status"

            # Se o status não for "Ready for Deployment", mudar a variável para false
            if [[ "$jira_status" != "Ready for Deployment" ]]; then
              echo "Erro: A tarefa $rmp_task não está fechada. Status atual: $jira_status"
              all_tasks_ready=false
            fi
          done

          # Se alguma tarefa não estiver pronta para deployment, falhar o job
          if [[ "$all_tasks_ready" == "false" ]]; then
            echo "Erro: Uma ou mais tarefas não estão prontas para deployment."
            exit 1
          else
            echo "Todas as tarefas estão prontas para deployment."
          fi

