name: Build docker image

on:
  workflow_call:
    inputs:
      docker-build-args:
        required: false
        type: string
        description: docker build args
      docker-build-target:
        required: false
        type: string
        description: Docker Image target during build
      docker-build-context:
        required: false
        type: string
        description: Dockerfile dir
        default: '.'
      docker-file-path:
        required: false
        type: string
        description: Dockerfile path
        default: 'Dockerfile'
      docker-labels:
        required: false
        type: string
        description: Docker labels
        default: ""
      docker-tag:
        required: true
        type: string
        description: Tag to be linked on ECR
      environment:
        required: true
        type: string
        description: Environment
      public-repository:
        required: false
        type: boolean
        description: Is the repository public?
        default: false
      scan-image:
        required: false
        type: boolean
        default: false
        description: Scan image with docker scout
      scout-command:
        required: false
        type: string
        default: quickview,cves,recommendations
        description: Scout command to run e.g. quickview,cves,recommendations,sbom,environment,compare
      scout-organization:
        required: false
        type: string
        default: iclinic
        description: Scout organization to use

    secrets:
      DOCKERHUB_USER:
        required: false
      DOCKERHUB_PASSWORD:
        required: false
      GH_ACCESS_TOKEN:
        required: false
      PIP_EXTRA_INDEX_URL:
        required: false
      REQUIREMENTS:
        required: false

env:
  TERM: xterm-256color

jobs:
  build:
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      contents: read
      id-token: write
      packages: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_CREDS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR Public
        if: inputs.public-repository == true
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Login to Private ECR ${{ vars.ECR_URL }}
        if: inputs.public-repository == false
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ECR_URL }}

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          push: true
          provenance: true       # <= Gera proveniência (necessário pro Docker Scout)
          sbom: true             # <= (Opcional) Gera também a SBOM
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ${{ inputs.docker-build-context }}
          labels: ${{ inputs.docker-labels }}
          target: ${{ inputs.docker-build-target }}
          file: ${{ inputs.docker-file-path }}
          tags: |
            ${{ vars.ECR_URL }}/${{ vars.ECR_REPO }}:latest
            ${{ vars.ECR_URL }}/${{ vars.ECR_REPO }}:${{ inputs.docker-tag }}
          build-args: |
            GH_ACCESS_TOKEN=${{ secrets.GH_ACCESS_TOKEN }}
            PIP_EXTRA_INDEX_URL=${{ secrets.PIP_EXTRA_INDEX_URL }}
            ${{ inputs.docker-build-args }}

      - name: Scan Docker Scout
        if: ${{ inputs.scan-image == true }}
        uses: docker/scout-action@v1
        with:
          command: ${{ inputs.scout-command }}
          write-comment: true
          organization: ${{ inputs.scout-organization }}
          image: ${{ vars.ECR_URL }}/${{ vars.ECR_REPO }}:${{ inputs.docker-tag }}
          github-token: ${{ secrets.GH_ACCESS_TOKEN }} # to be able to write the comment
          dockerhub-user: ${{ secrets.DOCKERHUB_USER }}
          dockerhub-password: ${{ secrets.DOCKERHUB_PASSWORD }}